# 서버설정
server:
  port: 0

spring:
  application:
    name: user-service

  config:
    import: optional:configserver:http://localhost:8888

  cloud:
    config:
      name: socat

  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/msa
    username: postgres
    password: 1234

  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        show_sql: true

  data:
    redis:
      host: localhost
      port: 6379


# Swagger 설정
springdoc:
  swagger-ui:
    # swagger-ui 접근 경로. default 값은 /swagger-ui.html이다.
#    path: /swagger-custom-ui.html

    # 각 API의 그룹 표시 순서
    # path, query, body, response 순으로 출력
    groups-order: DESC

    # 태그 정렬 순서.
    # alpha: 알파벳 순 정렬
    # method: OpenAPI specification file에 원하는 태그 정렬 방식 직접 기재
    tags-sorter: alpha

    # 컨트롤러 정렬 순서.
    # method는 delete - get - patch - post - put 순으로 정렬된다.
    # alpha를 사용해 알파벳 순으로 정렬할 수 있다.
    operations-sorter: method

    # swagger-ui default url인 petstore html의 비활성화 설정
    disable-swagger-default-url: true

    # swagger-ui에서 try 했을 때 request duration을 알려주는 설정
    display-request-duration: true

  # openAPI 접근 경로. default 값은 /v3/api-docs 이다.
#  api-docs:
#    path: /api-docs
  
  # Spring Actuator의 endpoint까지 보여줄 것인지?
#  show-actuator: true

  # request media type 의 기본 값
  default-consumes-media-type: application/json

  # response media type 의 기본 값
  default-produces-media-type: application/json

  # 해당 패턴에 매칭되는 controller만 swagger-ui에 노출한다.
#  paths-to-match:
#    - /api/**

# 초기 script 용 설정
#    defer-datasource-initialization: true
#  sql:
#    init:
#      mode: always

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

management:
  tracing:
    sampling:
      probability: 1.0
    propagation:
      consume: B3
      produce: B3

  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans

  endpoints:
    web:
      exposure:
        include: refresh,health,beans,httptrace,busrefresh,env

logging:
  pattern:
    correlation: '%5p [${spring.application.name:}, %X{traceId:-},%X{spanId-}]'

